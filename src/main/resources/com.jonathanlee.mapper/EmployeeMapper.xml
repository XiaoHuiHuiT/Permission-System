<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jonathanlee.mapper.EmployeeMapper">

    <resultMap id="BaseResultMap" type="Employee">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="inputtime" column="inputtime"/>
        <result property="tel" column="tel"/>
        <result property="email" column="email"/>
        <result property="state" column="state"/>
        <result property="admin" column="admin"/>
        <association property="department" javaType="Department" columnPrefix="d_">
            <id property="id" column="id"/>
            <result property="name" column="name"/>
        </association>
    </resultMap>

    <sql id="where_sql">
        <where>
            <if test="keyword != null and keyword != ''">
                and e.username like concat('%',#{keyword},'%')
                or e.tel like concat('%',#{keyword},'%')
                or e.email like concat('%',#{keyword},'%')
            </if>
        </where>
    </sql>

    <!--打破也角色之间的关系-->
    <delete id="deleteRoleRel" parameterType="Long">
        DELETE FROM `employee_role_rel` WHERE eid=#{id}
    </delete>
    <!--查询所有员工以及该员工的部门信息-->
    <select id="selectAllEmployee" resultMap="BaseResultMap">
        select
        e.id,
        e.username,
        e.inputtime,
        e.tel,
        e.email,
        e.state,
        e.admin,
        d.id as d_id,
        d.`name` as d_name
        from employee as e
        LEFT JOIN department as d
        on e.dep_id = d.id
        <include refid="where_sql"/>
        ORDER BY e.id DESC
    </select>

    <!--根据用户到数据库当中查询有没有当前用户-->
    <select id="getEmployeeWithUserName" resultType="Employee">
        SELECT * FROM `employee` WHERE `username`=#{username}
    </select>

    <!--根据用户id查询角色编号名称-->
    <select id="getRolesById" resultType="String">
        SELECT r.rnum
        FROM employee_role_rel AS er
        LEFT JOIN role AS r
        ON er.rid = r.rid
        WHERE er.eid = #{id}
    </select>

    <!--
    根据用户的id查询权限的名称    资源名称

    1.查询出所有的角色和权限
    2.筛选出当前用户有哪些角色
    -->
    <select id="getPermissionById" resultType="String">
        SELECT DISTINCT p.presource
        FROM role_permission_rel AS rp
        LEFT JOIN permission AS P
        ON rp.pid = p.pid
        WHERE rp.rid IN(
                SELECT rid
                FROM employee_role_rel
                WHERE eid = #{id}
        )
    </select>

    <!--添加员工
    useGeneratedKeys="true"：发回刚添加的员工id
    -->
    <insert id="insert" parameterType="Employee" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO `employee`(
    username,
    password,
    admin,
    state,
    email,
    tel,
    inputtime,
    dep_id)
    VALUES(#{username},#{password},#{admin},#{state},#{email},#{tel},#{inputtime},#{department.id})
  </insert>

    <!--保存角色 关系表-->
    <insert id="insertEmployeeAndRoleRel">
        INSERT INTO `employee_role_rel`(eid,rid) VALUES(#{id},#{rid});
    </insert>

    <!--更新员工-->
    <update id="updateByPrimaryKey" parameterType="Employee">
        UPDATE `employee` SET
        username = #{username},
        inputtime = #{inputtime},
        tel = #{tel},
        email = #{email},
        admin = #{admin},
        dep_id = #{department.id}
        WHERE id = #{id}
    </update>

    <!--设置员工离职状态-->
    <update id="updateState" parameterType="Long">
        UPDATE `employee` set state=false WHERE `id`=#{id}
    </update>
</mapper>